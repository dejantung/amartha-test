// Code generated by MockGen. DO NOT EDIT.
// Source: billing-engine/pkg/kafka (interfaces: ProducerProvider)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_producer.go -package=mocks billing-engine/pkg/kafka ProducerProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	kafka "billing-engine/pkg/kafka"
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProducerProvider is a mock of ProducerProvider interface.
type MockProducerProvider struct {
	ctrl     *gomock.Controller
	recorder *MockProducerProviderMockRecorder
}

// MockProducerProviderMockRecorder is the mock recorder for MockProducerProvider.
type MockProducerProviderMockRecorder struct {
	mock *MockProducerProvider
}

// NewMockProducerProvider creates a new mock instance.
func NewMockProducerProvider(ctrl *gomock.Controller) *MockProducerProvider {
	mock := &MockProducerProvider{ctrl: ctrl}
	mock.recorder = &MockProducerProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProducerProvider) EXPECT() *MockProducerProviderMockRecorder {
	return m.recorder
}

// SendMessage mocks base method.
func (m *MockProducerProvider) SendMessage(arg0 context.Context, arg1 kafka.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMessage", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMessage indicates an expected call of SendMessage.
func (mr *MockProducerProviderMockRecorder) SendMessage(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMessage", reflect.TypeOf((*MockProducerProvider)(nil).SendMessage), arg0, arg1)
}
