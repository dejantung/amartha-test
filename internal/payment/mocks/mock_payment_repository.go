// Code generated by MockGen. DO NOT EDIT.
// Source: billing-engine/internal/payment/repository (interfaces: PaymentRepositoryProvider)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_payment_repository.go -package=mocks billing-engine/internal/payment/repository PaymentRepositoryProvider
//

// Package mocks is a generated GoMock package.
package mocks

import (
	domain "billing-engine/internal/payment/domain"
	enum "billing-engine/pkg/enum"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockPaymentRepositoryProvider is a mock of PaymentRepositoryProvider interface.
type MockPaymentRepositoryProvider struct {
	ctrl     *gomock.Controller
	recorder *MockPaymentRepositoryProviderMockRecorder
}

// MockPaymentRepositoryProviderMockRecorder is the mock recorder for MockPaymentRepositoryProvider.
type MockPaymentRepositoryProviderMockRecorder struct {
	mock *MockPaymentRepositoryProvider
}

// NewMockPaymentRepositoryProvider creates a new mock instance.
func NewMockPaymentRepositoryProvider(ctrl *gomock.Controller) *MockPaymentRepositoryProvider {
	mock := &MockPaymentRepositoryProvider{ctrl: ctrl}
	mock.recorder = &MockPaymentRepositoryProviderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPaymentRepositoryProvider) EXPECT() *MockPaymentRepositoryProviderMockRecorder {
	return m.recorder
}

// CreateLoan mocks base method.
func (m *MockPaymentRepositoryProvider) CreateLoan(arg0 context.Context, arg1 domain.Loan) (domain.Loan, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateLoan", arg0, arg1)
	ret0, _ := ret[0].(domain.Loan)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateLoan indicates an expected call of CreateLoan.
func (mr *MockPaymentRepositoryProviderMockRecorder) CreateLoan(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateLoan", reflect.TypeOf((*MockPaymentRepositoryProvider)(nil).CreateLoan), arg0, arg1)
}

// CreatePayment mocks base method.
func (m *MockPaymentRepositoryProvider) CreatePayment(arg0 context.Context, arg1 domain.Payment) (domain.Payment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePayment", arg0, arg1)
	ret0, _ := ret[0].(domain.Payment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePayment indicates an expected call of CreatePayment.
func (mr *MockPaymentRepositoryProviderMockRecorder) CreatePayment(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePayment", reflect.TypeOf((*MockPaymentRepositoryProvider)(nil).CreatePayment), arg0, arg1)
}

// IsCustomerHasLoan mocks base method.
func (m *MockPaymentRepositoryProvider) IsCustomerHasLoan(arg0 context.Context, arg1, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsCustomerHasLoan", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsCustomerHasLoan indicates an expected call of IsCustomerHasLoan.
func (mr *MockPaymentRepositoryProviderMockRecorder) IsCustomerHasLoan(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsCustomerHasLoan", reflect.TypeOf((*MockPaymentRepositoryProvider)(nil).IsCustomerHasLoan), arg0, arg1, arg2)
}

// IsLoanScheduleExist mocks base method.
func (m *MockPaymentRepositoryProvider) IsLoanScheduleExist(arg0 context.Context, arg1, arg2 uuid.UUID) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLoanScheduleExist", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsLoanScheduleExist indicates an expected call of IsLoanScheduleExist.
func (mr *MockPaymentRepositoryProviderMockRecorder) IsLoanScheduleExist(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLoanScheduleExist", reflect.TypeOf((*MockPaymentRepositoryProvider)(nil).IsLoanScheduleExist), arg0, arg1, arg2)
}

// UpdatePaymentScheduleStatus mocks base method.
func (m *MockPaymentRepositoryProvider) UpdatePaymentScheduleStatus(arg0 context.Context, arg1, arg2 uuid.UUID, arg3 enum.PaymentStatus) (*domain.PaymentSchedule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdatePaymentScheduleStatus", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*domain.PaymentSchedule)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdatePaymentScheduleStatus indicates an expected call of UpdatePaymentScheduleStatus.
func (mr *MockPaymentRepositoryProviderMockRecorder) UpdatePaymentScheduleStatus(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdatePaymentScheduleStatus", reflect.TypeOf((*MockPaymentRepositoryProvider)(nil).UpdatePaymentScheduleStatus), arg0, arg1, arg2, arg3)
}
